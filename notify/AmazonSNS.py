import boto3
import json
import logging

class SNSNotifier:
    def __init__(self, region_name='us-east-1', topic_name='S3NTRY'):
        self.sns_client = boto3.client('sns', region_name=region_name)
        self.topic_name = topic_name
        self.topic_arn = None
        self._ensure_topic_exists()
    
    def _ensure_topic_exists(self):
        """Create SNS topic if it doesn't exist"""
        try:
            response = self.sns_client.create_topic(Name=self.topic_name)
            self.topic_arn = response['TopicArn']
            logging.info(f"SNS topic ready: {self.topic_arn}")
        except Exception as e:
            logging.error(f"Failed to create/access SNS topic: {e}")
            raise
    
    def send_alert(self, findings):
        """Send alert notification for S3 findings"""
        if not findings:
            return
        
        # Create alert message
        message = self._format_alert_message(findings)
        subject = f"S3Entry Alert: {len(findings)} Risky S3 Bucket(s) Found"
        
        try:
            response = self.sns_client.publish(
                TopicArn=self.topic_arn,
                Message=message,
                Subject=subject
            )
            logging.info(f"Alert sent successfully. MessageId: {response['MessageId']}")
            return response
        except Exception as e:
            logging.error(f"Failed to send SNS alert: {e}")
            raise
    
    def _format_alert_message(self, findings):
        """Format findings into a readable alert message"""
        message_lines = [
            "S3Entry Security Alert",
            "=" * 30,
            f"Found {len(findings)} risky S3 bucket(s):",
            ""
        ]
        
        for finding in findings:
            bucket_name = finding['bucket']
            message_lines.append(f"Bucket: {bucket_name}")
            
            issues = []
            if not finding['public_access_block']:
                issues.append("- Public Access Block disabled")
            if finding['public_policy']:
                issues.append("- Public bucket policy detected")
            if not finding['encrypted']:
                issues.append("- Default encryption missing")
            
            for issue in issues:
                message_lines.append(f"  {issue}")
            message_lines.append("")
        
        message_lines.extend([
            "Action Required:",
            "1. Review and secure these buckets immediately",
            "2. Enable Block Public Access",
            "3. Remove public policies if not needed",
            "4. Enable default encryption",
            "",
            "Generated by S3Entry Scanner"
        ])
        
        return "\n".join(message_lines)